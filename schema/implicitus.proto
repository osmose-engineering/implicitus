syntax = "proto3";
package implicitus;

// A 3D vector for positions, sizes, etc.
message Vector3 {
  double x = 1;
  double y = 2;
  double z = 3;
}

// A 2D vector for profile points
message Vector2 {
  double x = 1;
  double y = 2;
}

// Basic primitive shapes
message Box {
  Vector3 size = 1; // width, height, depth
}

message Sphere {
  double radius = 1;
}

message Cylinder {
  double radius = 1;
  double height = 2;
}

message Cone {
  double baseRadius = 1;
  double topRadius = 2;
  double height = 3;
}

message Torus {
  double ringRadius = 1;  // distance from center to tube center
  double tubeRadius = 2;  // radius of the tube
}

message Cube {
  double size = 1;  // uniform edge length
}

// Geometric primitives for field-driven design
message Point {
  Vector3 position = 1;  // single point in space
}

message Line {
  Vector3 start = 1;     // line start point
  Vector3 end = 2;       // line end point
}

message Plane {
  Vector3 origin = 1;    // a point on the plane
  Vector3 normal = 2;    // unit normal vector defining plane orientation
}

message Extrude2D {
  repeated Vector2 profilePoints = 1;
  double depth = 2;
}

message Revolve2D {
  repeated Vector2 profilePoints = 1;
  double startAngle = 2;
  double endAngle = 3;
}

message Loft {
  // a section of a loft: 2D profile at a given position along the loft axis
  message Section {
    repeated Vector2 profilePoints = 1;
    double position = 2;
  }
  repeated Section sections = 1;
}

message Sweep {
  repeated Vector3 path = 1;
  repeated Vector2 profilePoints = 2;
}

// Defines how to fill the interior of a solid primitive
message Infill {
  string pattern = 1;  // name of the infill pattern, e.g., "grid", "hex"
  double density = 2;  // fill density, between 0 (empty) and 1 (solid)

  // Voronoi lattice parameters
  repeated Vector3 seed_points = 3;  // 3D seed positions for lattice
  double spacing = 4;                // target cell spacing
  repeated Edge2D edges = 5;         // 2D slice edges for lattice cells
  repeated Cell3D cells = 6;         // 3D cell meshes for lattice infill
  repeated float bbox_min = 11;  // length-3 or length-2 for a slice
  repeated float bbox_max = 12;
  float wall_thickness = 13;
  bool uniform = 14;
}

// Infill helper types
message Edge2D {
  Vector2 start = 1;
  Vector2 end   = 2;
}
message Face {
  repeated int32 vertex_indices = 1;
}
message Cell3D {
  repeated Vector3 vertices = 1;
  repeated Face    faces    = 2;
}


// Boolean operations for combining primitives and other nodes
message BooleanOp {
  // Types of boolean operations
  message Union {
    repeated Node nodes = 1;
  }
  message Difference {
    Node a = 1;
    repeated Node b = 2;
  }
  message Intersection {
    repeated Node nodes = 1;
  }
  oneof op {
    Union union = 1;
    Difference difference = 2;
    Intersection intersection = 3;
  }
}

// A generic primitive wrapper
message Primitive {
  oneof shape {
    Box box = 1;
    Sphere sphere = 2;
    Cylinder cylinder = 3;
    Cone cone = 4;
    Torus torus = 5;
    Extrude2D extrude2D = 6;
    Revolve2D revolve2D = 7;
    Loft loft = 8;
    Sweep sweep = 9;
    Point point = 10;
    Line line = 11;
    Plane plane = 12;
    Cube cube = 13;
  }
}

// Transform operations
message Translate {
  Vector3 offset = 1;
}

message Scale {
  Vector3 factors = 1; // uniform or non-uniform scaling
}

message Transform {
  oneof op {
    Translate translate = 1;
    Scale scale = 2;
  }
}

// A modifier applied to a primitive (infill, shell, lattice, boolean, etc.)
message Modifier {
  oneof kind {
    Infill infill = 1;               // lattice infill or other patterns
    Shell shell = 2;                 // shell thickness
    VoronoiLattice lattice = 3;      // parameterized Voronoi lattice
    BooleanOp boolean_op = 4;        // bool. operation on this primitive
  }
}

// A node in the implicit scene graph
message Node {
  // The primary content of this node: either a base primitive or a transform
  oneof body {
    Primitive primitive  = 1;
    Transform transform  = 2;
  }
  // Child nodes in the scene graph
  repeated Node children = 7;

  // Modifiers to apply to this primitive (infill, shell, lattice, boolean, etc.)
  repeated Modifier modifiers = 8;
}

// Top-level model definition
message Model {
  string id = 1;
  Node root = 2;
  // Optional design constraints
  repeated Constraint constraints = 3;
}

// Hollow‚Äêshell operation: wraps a model in a uniform shell
message Shell {
  double thickness = 1;
}

// Combined shell + infill operation
message ShellFill {
  Shell shell = 1;
  Infill infill = 2;
}

// Voronoi lattice generation parameters
message VoronoiLattice {
  // Seed-point sampling
  double min_dist = 1;              // fixed Poisson-disk radius
  string density_field = 2;         // reference to a user-defined density function
  string scale_field = 3;           // reference to an anisotropic scale function

  // Adaptive octree grid resolution
  bool adaptive = 4;                // whether to use adaptive octree
  int32 max_depth = 5;              // maximum subdivision depth
  double threshold = 6;             // error threshold for subdivision
  string error_metric = 7;          // reference to a custom error metric function

  // Uniform grid resolution if not adaptive
  repeated int32 resolution = 8;    // [nx, ny, nz] resolution of grid

  // Lattice parameters
  double wall_thickness = 9;
  double shell_offset = 10;
  string blend_curve = 11;          // reference to a blend-weight function

  // CSG operations
  message CSGOp {
    enum Type {
      UNION = 0;
      INTERSECTION = 1;
      DIFFERENCE = 2;
    }
    Type op = 1;
    string sdf = 2;                 // reference to an SDF function
    double r = 3;                   // blend radius
  }
  repeated CSGOp csg_ops = 12;

  // Automatic capping
  bool auto_cap = 13;
  double cap_blend = 14;
}

// Design constraints for generative workflows
message Constraint {
  oneof type {
    DimensionConstraint dimension = 1;
    LoadConstraint load = 2;
    // custom or other constraint types
    string custom = 3;
  }
}

// Enforce part size limits
message DimensionConstraint {
  Vector3 min = 1;  // minimum allowed dimensions
  Vector3 max = 2;  // maximum allowed dimensions
}

// Enforce load or strength requirements
message LoadConstraint {
  double force = 1;     // magnitude in newtons
  Vector3 direction = 2; // load vector direction
}